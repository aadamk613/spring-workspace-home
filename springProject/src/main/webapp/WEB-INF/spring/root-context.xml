<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!--  
	
		* root-context.xml
		서버 구동과 동시에 web.xml파일을 거쳐서 바로 로딩되는 문서 == preloading(서버가 실행되기 전에 읽혀지는 문서)
		=> 서버 구동과 동시에 바로 세팅(bean 등록)해야하는 내용들을 작성
		주로 DB접속정보, 트랜잭션 처리, 외부모듈연결 등등...
		-> 등록 된 빈은Spring Exploer에서 프로젝트명/Beans/root-context.xml/beans에서 확인 할 수 있음
	 -->
	
	<!--  DB연결을 위한 Bean등록 3단계 -->
	<!-- 1단계. DB연결을 위한 도구를 설정 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
		<!-- class속성: 풀클래스명, id속성: 식별값, destroy-method속성: 이 객체가 소멸될 때 어떤 메소드를 호출할것인지(close==반환을 해주는 메소드)-->
		<!--  어떤 DB에 접속할건지 정보 작성 -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="SPRING"></property>
		<property name="password" value="SPRING"></property>
	</bean>
	
	<!-- 
		객체가 필요할 때마다 내부적으로 실행되는 코드
		이렇게 직접 객체를 생성 할 수도 있지만 객체 관리를 스프링에게 위임하여 스프링이 실행
		BasicDataSource dataCource = new BasicDataCource();
		dataSource.setDriverclassName("oracle.jdbc.driver.OracleDriver");
		dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe"); 
		...
	 --> 
	 
	 
 	<!--  2단계. MyBatisSpring에서 제공하는 SQL명령을 실행하기위한 도구 -->
 	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
 		<!--  Mybatis 설정파일의 위치를 지정하여 설정값들 가져와야함 -->
 		 <property name="configLocation" value="classpath:mybatis-config.xml" />
 		 <!-- 어떤 DB에 연결한건지 연결을 위한 도구 참조설정 -->
 		 <property name="dataSource" ref="dataSource" />
 	</bean>
 	
 	<!-- 
 		객체가 필요할 때마다 내부적으로 실행되는 코드 
 		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFacrotyBean();
 		sqlSesssionFactory.setConfigLocation("classpath:mybatis-config.xml");
 		sqlSessionFactory.setDataSource(dataSource);
 	 -->
 	 
 	 <!-- 3단계. SQL 구문 실행릉 위한 템플릿을  제공하는 도구 등록-->
 	 <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
 	 	<!-- 매개변수 생성자 참조 설정 -->
 	 	<constructor-arg ref="sqlSessionFactory" />
 	 </bean>
 	 <!-- 
	 	 객체가 필요할 때마다 내부적으로 실행되는 코드
	 	 SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSesssionFactory);
	 	 property : setter injection(setter 주입)
	 	 constructor-arg : constructor injection(생성자 주입)
 	 -->
 	 
 	 <!-- 
 	 	xml문서에서 bean으로 등록하는 방법
 	 	1.bean 태그를 쓴다.
 	 	2. class속성에 풀 클래스명을 적는다.
 	 	3. id속성에 id값을 적는다.
 	  <bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" id="bcyptPasswordEncoder" />
 	  -->
	 	  
 	 <!-- 파일 업로드 관련 빈 등록 -->
 	 <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver" >
 	 	<property name="maxUploadSize" value="10000000" />
 	 	<property name="maxInMemorySize" value="100000000" />
 	 </bean>
	
	<!-- 메일 전송 도구 등록 -->
	<bean id="sender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com"></property>
		<property name="port" value="587"></property>
		<property name="username" value="aadamk666@gmail.com"></property>
		<property name="password" value="zkzevacrhhcenmgg"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	
</beans>
